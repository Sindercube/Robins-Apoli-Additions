buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            url "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Ladysnake Libs"
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
        }
        maven {
            url = 'https://maven.cafeteria.dev'
            content {
                includeGroup 'net.adriantodt.fabricmc'
            }
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
    }
    dependencies {
        classpath 'io.github.thatrobin.docky:Docky:0.1.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    mavenLocal()
}

loom {
    accessWidenerPath = file("src/main/resources/ra_additions.accesswidener")
    runs {
        CreateDocs {
            inherit client
            name "Create Docs"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

            runDir "build/docky"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"

    modImplementation "com.github.apace100:calio:${project.calio_version}"
    include "com.github.apace100:calio:${project.calio_version}"

    modImplementation "com.github.apace100:apoli:${project.apoli_version}"
    include "com.github.apace100:apoli:${project.apoli_version}"

    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    modImplementation  'io.github.thatrobin.docky:Docky:0.1.1'
    include  'io.github.thatrobin.docky:Docky:0.1.1'

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
    }
}
