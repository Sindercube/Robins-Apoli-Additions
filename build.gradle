plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://maven.ladysnake.org/releases" }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    mavenLocal()
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "com.github.apace100:calio:${project.calio_version}"
    //include "com.github.apace100:calio:${project.calio_version}"

    modImplementation("com.github.apace100:apoli:${project.apoli_version}")
    //include("com.github.apace100:apoli:${project.apoli_version}")

    //implementation("com.github.LlamaLad7:MixinExtras:0.2.0-beta.4")
    //annotationProcessor("com.github.LlamaLad7:MixinExtras:0.2.0-beta.4")

    //modCompileOnlyApi "com.jamieswhiteshirt:reach-entity-attributes:${project.rea_version}"

    //classpath "com.github.thatrobin:Docky:${project.docky_version}"
    modImplementation "com.github.ThatRobin.Docky:Docky:${project.docky_version}"
    include "com.github.ThatRobin.Docky:Docky:${project.docky_version}"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/ra_additions.accesswidener")
    mods {
        register("ra_additions") {
            sourceSet(sourceSets.main)
            sourceSet(sourceSets.test)
        }
    }
    runs {
        client {
            client()
            source(sourceSets.test)
            setConfigName("Minecraft Client")
        }
        server {
            server()
            source(sourceSets.test)
            setConfigName("Minecraft Server")
        }
        CreateDocs {
            inherit client
            name "Create Docs"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"
            runDir "build/docky"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
//    modImplementation "software.bernie.geckolib:geckolib-fabric-${project.minecraft_version}:${project.geckolib_version}"

    subprojects.each {
        runtimeOnly(project(path: ":${it.name}", configuration: 'namedElements'))
        if (!it.name.endsWith("experimental")) {
            include(project(path: ":${it.name}", configuration: 'namedElements'))
        }
    }
}

/*
subprojects {
    afterEvaluate {
        // Disable the gen sources task on sub projects
        genSourcesWithFernFlower.enabled = false
        genSourcesWithCfr.enabled = false
        unpickJar.enabled = false
    }

    processResources {
        inputs.property "version", project.version
        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    dependencies {
        implementation project(path: ":", configuration: "namedElements")
    }
}
*/

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

/*
def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
*/