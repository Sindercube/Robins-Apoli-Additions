buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            url "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Ladysnake Libs"
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
        }
        maven {
            url = 'https://maven.cafeteria.dev'
            content {
                includeGroup 'net.adriantodt.fabricmc'
            }
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
    }
    dependencies {
        classpath "io.github.thatrobin.docky:Docky:${project.docky_version}"
    }
}

plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "fabric-loom"

    java {
        withSourcesJar()
    }

    version = project.mod_version
    group = project.maven_group

    // add repos for all projects
    repositories {
        maven {
            name = "JitPack"
            url = "https://jitpack.io"
        }
        maven {
            url "https://maven.shedaniel.me/"
        }
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Ladysnake Libs"
            url = 'https://ladysnake.jfrog.io/artifactory/mods'
        }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
        maven {
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        }
        mavenLocal()
    }

    // floader needs to be in every sub module
    dependencies {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        modImplementation "com.github.apace100:calio:${project.calio_version}"
        include "com.github.apace100:calio:${project.calio_version}"

        modImplementation "com.github.apace100:apoli:${project.apoli_version}"
        include "com.github.apace100:apoli:${project.apoli_version}"

        implementation("com.github.LlamaLad7:MixinExtras:0.2.0-beta.4")
        annotationProcessor("com.github.LlamaLad7:MixinExtras:0.2.0-beta.4")

        modImplementation "io.github.thatrobin.docky:Docky:${project.docky_version}"
        include "io.github.thatrobin.docky:Docky:${project.docky_version}"

        modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"
        include "dev.onyxstudios.cardinal-components-api:cardinal-components-world:${project.cca_version}"

        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    processResources {
        inputs.property "version", version

        filesMatching("fabric.mod.json") {
            expand "version": version
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }

        repositories {
        }
    }
}

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
    }
    mavenLocal()
}

loom {
    accessWidenerPath = file("src/main/resources/ra_additions.accesswidener")
    runs {
        CreateDocs {
            inherit client
            name "Create Docs"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${archives_base_name}"

            runDir "build/docky"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "com.github.apace100:origins-fabric:${project.origins_version}"
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${project.minecraft_version}:${project.geckolib_version}"


    include(project(path: ":ra_additions_tags", configuration: "namedElements"))
    include(project(path: ":ra_additions_choices", configuration: "namedElements"))
    include(project(path: ":ra_additions_goals", configuration: "namedElements"))
}

subprojects {
    dependencies {
        implementation(project(path: ":", configuration: "namedElements")) {
            exclude group: "net.fabricmc", module: "fabric-loader"
        }
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    def environment = System.getenv("ENVIRONMENT")
    if (environment != "production") {
        from(rootProject.rootDir.absolutePath + "/testdata") { into 'data' }
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}


